generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// -------------------------------------
/// TABLAS AUXILIARES / CATÁLOGOS
/// -------------------------------------

model Zone {
  id         Int        @id @default(autoincrement()) // PK: identificador único de la zona
  name       String     @unique                       // Nombre de la zona (ej: Norte, Centro)
  code       String     @unique                       // Código corto de la zona (útil para integraciones)
  isActive   Boolean    @default(true)                // Indica si la zona está activa (soft delete)

  collectors Collector[]                              // Rel: cobradores asignados a la zona
  customers  Customer[]                               // Rel: clientes asignados a la zona

  @@map("zones")
  @@index([name])
  @@index([code])
  @@index([isActive])
}

model TypeDocumentIdentification {
  id       Int       @id @default(autoincrement())    // PK: id del tipo de documento
  name     String    @unique                          // Nombre del tipo (CC, CE, NIT...)
  code     String    @unique                          // Código corto (ej: CC)
  isActive Boolean   @default(true)                   // Activo/inactivo para administración

  customers Customer[]                                // Rel: clientes que usan este tipo de documento
  collectors Collector[]                               // Rel: cobradores que usan este tipo de documento

  @@map("type_document_identifications")
  @@index([name])
  @@index([code])
  @@index([isActive])
}

model Gender {
  id       Int       @id @default(autoincrement())    // PK: id del género
  name     String    @unique                          // Nombre (Masculino, Femenino, Otro)
  code     String    @unique                          // Código corto
  isActive Boolean   @default(true)                   // Activación/desactivación

  customers Customer[]                                // Rel: clientes vinculados
  collectors  Collector[]                             // Rel: cobradores vinculados

  @@map("genders")
  @@index([name])
  @@index([code])
  @@index([isActive])
}

model CreditType {
  id       Int       @id @default(autoincrement())    // PK: id del tipo de crédito
  name     String    @unique                          // Ej: CUOTA_FIJA, INTERES_MENSUAL (método)
  isActive Boolean   @default(true)                   // Permite activar/desactivar tipos

  credits  Credit[]                                    // Créditos asociados a este tipo

  @@map("credit_types")
  @@index([name])
  @@index([isActive])
}

model PaymentFrequency {
  id       Int       @id @default(autoincrement())    // PK: id de frecuencia
  name     String    @unique                          // Ej: DAILY, WEEKLY, BIWEEKLY, MONTHLY
  isActive Boolean   @default(true)                   // Activación para administrar frecuencias

  credits  Credit[]                                    // Créditos que usan esta frecuencia

  @@map("payment_frequencies")
  @@index([name])
  @@index([isActive])
}

model CreditStatus {
  id       Int       @id @default(autoincrement())    // PK: id del estado del crédito
  name     String    @unique                          // Ej: ACTIVO, CANCELADO, REFINANCIADO
  isActive Boolean   @default(true)                   // Permite mantener catálogo dinámico

  credits  Credit[]                                    // Créditos en ese estado

  @@map("credit_statuses")
  @@index([name])
  @@index([isActive])
}

model PaymentType {
  id       Int       @id @default(autoincrement())    // PK: id tipo de pago
  name     String    @unique                          // Ej: CAPITAL, INTEREST, LATE_FEE, RENT
  isActive Boolean   @default(true)                   // Control de catálogo

  payments Payment[]                                  // Pagos registrados con ese tipo

  @@map("payment_types")
  @@index([name])
  @@index([isActive])
}

/// -------------------------------------
/// USUARIOS, ROLES Y PERMISOS
/// -------------------------------------

model User {
  id          Int          @id @default(autoincrement()) // PK: id del usuario del sistema
  email       String       @unique                       // Email único para login
  password    String                                   // Contraseña hasheada
  name        String                                   // Nombre del usuario (para auditoría)
  roleId      Int?                                     // FK opcional a Role (control de acceso)
  role        Role?        @relation(fields: [roleId], references: [id])
  loginAudits LoginAudit[]                              // Historial de accesos
  customer    Customer?    @relation                     // Si el usuario también es un cliente del sistema
  collector   Collector?   @relation                     // Si el usuario también es cobrador
  isActive    Boolean      @default(true)               // Usuario activo/inactivo

  // Relación para pagos registrados por este usuario (audit)
  paymentsRecorded Payment[] @relation("PaymentsRecordedByUser")

  @@map("users")
  @@index([email])
  @@index([roleId])
  @@index([isActive])
}

model Role {
  id              Int              @id @default(autoincrement()) // PK rol
  name            String           @unique                       // Nombre del rol (admin, collector,...)
  description     String?                                      // Descripción del rol
  isActive        Boolean          @default(true)               // Activación del rol
  rolePermissions RolePermission[]                              // Permisos asignados
  users           User[]                                        

  @@map("roles")
  @@index([name])
  @@index([isActive])
}

model Permission {
  id              Int              @id @default(autoincrement()) // PK permiso
  name            String           @unique                        // Nombre (crear_cliente, ver_reportes...)
  description     String?
  isActive        Boolean          @default(true)                // Activación del permiso
  rolePermissions RolePermission[]                               // Roles que contienen este permiso

  @@map("permissions")
  @@index([name])
  @@index([isActive])
}

model RolePermission {
  roleId       Int
  permissionId Int

  // FK y relaciones para tabla intermedia muchos-a-muchos
  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  isActive Boolean @default(true) // Permite desactivar asociaciones sin borrarlas

  @@id([roleId, permissionId])    // PK compuesta
  @@map("role_permissions")
  @@index([roleId])
  @@index([permissionId])
  @@index([isActive])
}

model LoginAudit {
  id        Int      @id @default(autoincrement()) // PK auditoría de login
  userId    Int                                      // FK al usuario que inició sesión
  sessionId String   @default("unknown")            // Identificador de sesión (si hay)
  ip        String                                   // IP desde donde se conectó
  device    String                                   // User-agent / dispositivo
  location  String?                                  // Ubicación opcional (geo)
  timestamp DateTime @default(now())                 // Marca de tiempo del acceso

  user User @relation(fields: [userId], references: [id]) // Relación a User

  @@map("logins")
  @@index([userId])
  @@index([timestamp])
  @@index([sessionId])
}

model Change {
  id        Int      @id @default(autoincrement()) // PK: registro de cambios (audit trail)
  model     String                                   // Nombre del modelo afectado (ej: "Credit")
  action    String                                   // Acción (CREATE, UPDATE, DELETE)
  before    Json?                                    // Estado anterior (JSON) - útil para revert/registro
  after     Json?                                    // Estado posterior (JSON)
  timestamp DateTime @default(now())                 // Fecha del cambio
  userId    Int                                      // Usuario que realizó el cambio

  @@map("changes")
  @@index([model])
  @@index([action])
  @@index([userId])
  @@index([timestamp])
}

/// -------------------------------------
/// CUSTOMERS Y COBRADORES
/// -------------------------------------

model Customer {
  id                    Int       @id @default(autoincrement()) // PK cliente (antes "clients")
  name                  String    // Nombre completo (se puede dividir en first/last si se desea)
  phone                 String    // Teléfono principal de contacto
  address               String    // Dirección física
  typeDocumentId        Int       // FK a tipo de documento (para validaciones y reportes)
  documentNumber        String    @unique // Número de documento (único por cliente)
  genderId              Int       // FK a Gender (reportes y segmentaciones)
  userId                Int?      @unique // FK opcional a User si el customer también tiene cuenta
  zoneId                Int       // FK a zona (ruta / asignación de cobrador)
  isActive              Boolean   @default(true) // Soft-delete / activación

  // Relaciones (definidas con fields/references)
  typeDocument          TypeDocumentIdentification @relation(fields: [typeDocumentId], references: [id])
  gender                Gender                     @relation(fields: [genderId], references: [id])
  user                  User?                      @relation(fields: [userId], references: [id])
  zone                  Zone                       @relation(fields: [zoneId], references: [id])

  credits               Credit[]                   // Créditos asociados a este customer

  @@map("customers")
  @@index([name])
  @@index([typeDocumentId])
  @@index([documentNumber])
  @@index([zoneId])
  @@index([isActive])
}

model Collector {
  id         Int     @id @default(autoincrement()) // PK cobrador
  firstName  String                                  // Nombre
  lastName   String                                  // Apellido

  typeDocumentIdentificationId Int                   // FK a tipo de documento
  typeDocumentIdentification   TypeDocumentIdentification @relation(fields: [typeDocumentIdentificationId], references: [id])

  genderId Int
  gender   Gender @relation(fields: [genderId], references: [id])

  documentNumber String   @unique
  birthDate      DateTime @db.Date
  address        String
  phone      String                                  // Teléfono
  zoneId     Int?                                    // FK opcional a Zone (si trabaja por zona)
  userId     Int?    @unique                         // FK opcional a User (si tiene cuenta)
  isActive   Boolean @default(true)                  // Activación del cobrador

  // Relaciones
  zone        Zone?      @relation(fields: [zoneId], references: [id])
  user        User?      @relation(fields: [userId], references: [id])
  payments    Payment[]  @relation("PaymentsCollectedByCollector") // Pagos que recoge este cobrador

  @@map("collectors")
  @@index([firstName])
  @@index([lastName])
  @@index([zoneId])
  @@index([isActive])
}

/// -------------------------------------
/// CRÉDITOS, CUOTAS, PAGOS Y REFINANCIACIONES
/// -------------------------------------

model Credit {
  id                   Int                 @id @default(autoincrement()) // PK crédito
  customerId           Int                                         // FK al customer propietario del crédito
  customer             Customer            @relation(fields: [customerId], references: [id])

  principal            Decimal             @db.Decimal(12,2)   // Monto prestado original (capital inicial)
  remainingBalance     Decimal             @db.Decimal(12,2)   // Saldo actual restante (se reduce al aplicar principal)
  interestRate         Decimal             @db.Decimal(6,4)    // Tasa de interés (ej. 0.0500 => 5% anual o según convención)
  paymentAmount        Decimal?            @db.Decimal(12,2)   // Cuota fija (si aplica) — puede ser null para interés-only
  term                 Int?                                    // Número de cuotas/plazos (si aplica)
  paymentFrequencyId   Int                                         // FK frecuencia de pago (diario, semanal...)
  paymentFrequency     PaymentFrequency    @relation(fields: [paymentFrequencyId], references: [id])
  creditTypeId         Int                                         // FK al tipo de crédito (cuota fija vs interés mensual)
  creditType           CreditType          @relation(fields: [creditTypeId], references: [id])
  creditStatusId       Int                                         // FK estado (ACTIVO, CANCELADO...)
  creditStatus         CreditStatus        @relation(fields: [creditStatusId], references: [id])

  startDate            DateTime                                   // Fecha de inicio del crédito
  nextDueDate          DateTime?                                  // Próxima fecha esperada de pago (actualizable por la lógica)
  isActive             Boolean   @default(true)                   // Soft-delete / activo

  installments         Installment[]                              // Cronograma de cuotas generadas
  payments             Payment[]                                  // Pagos registrados que afectan este crédito
  refinancingsOriginal Refinancing[] @relation("OriginalCredit")   // Lista de refinanciamientos donde este crédito fue el original
  refinancingsNew      Refinancing[] @relation("NewCredit")        // Lista donde este crédito fue el nuevo producto tras refinanciación

  createdAt            DateTime  @default(now())                  // Fecha creación del registro
  updatedAt            DateTime  @updatedAt                       // Última actualización automática

  @@map("credits")
  @@index([customerId])
  @@index([paymentFrequencyId])
  @@index([creditTypeId])
  @@index([creditStatusId])
  @@index([isActive])
}

/// -------------------------------------
/// TABLA DE CUOTAS (INSTALLMENTS)
/// -------------------------------------
model Installment {
  id                 Int       @id @default(autoincrement())       // PK cuota (installment)
  creditId           Int                                             // FK al crédito
  credit             Credit    @relation(fields: [creditId], references: [id])
  sequence           Int       // Número de cuota en el cronograma (1..N)
  dueDate            DateTime  // Fecha de vencimiento de esta cuota
  principalAmount    Decimal   @db.Decimal(12,2) // Porción de capital esperada
  interestAmount     Decimal   @db.Decimal(12,2) // Porción de interés esperada
  totalAmount        Decimal   @db.Decimal(12,2) // principalAmount + interestAmount (valor esperado)
  paidAmount         Decimal   @db.Decimal(12,2) @default(0) // Acumulado pagado contra esta cuota
  isPaid             Boolean   @default(false)   // Si la cuota está completamente pagada
  isActive           Boolean   @default(true)    // Activación de la cuota (soft delete)
  paidAt             DateTime? // Fecha en la que se completó el pago total de la cuota

  payments           Payment[] // Pagos aplicados a esta cuota (vínculo para trazabilidad)

  @@map("installments")
  @@index([creditId])
  @@index([dueDate])
  @@index([isPaid])
}

model Payment {
  id                 Int       @id @default(autoincrement()) // PK pago
  creditId           Int                                        // FK al crédito afectado
  credit             Credit    @relation(fields: [creditId], references: [id])
  installmentId      Int?                                       // FK opcional a cuota si el pago se aplica a una cuota específica
  installment        Installment? @relation(fields: [installmentId], references: [id])

  amount             Decimal   @db.Decimal(12,2)  // Monto total del registro de pago
  paymentTypeId      Int
  paymentType        PaymentType @relation(fields: [paymentTypeId], references: [id]) // Tipo (capital, interés, mora...)

  collectorId        Int?                                         // Cobrador que registró o recogió el pago (opcional)
  collector          Collector? @relation("PaymentsCollectedByCollector", fields: [collectorId], references: [id])

  date               DateTime  @default(now()) // Fecha en que se registró el pago

  // DESGLOSE: resultados de la lógica al aplicar el pago
  appliedToPrincipal Decimal   @db.Decimal(12,2) @default("0.00") // Parte aplicada a capital (debe reducir remainingBalance)
  appliedToInterest  Decimal   @db.Decimal(12,2) @default("0.00") // Parte aplicada a intereses (registro para reporting)
  appliedToLateFee   Decimal   @db.Decimal(12,2) @default("0.00") // Parte aplicada a mora (si procede)

  recordedByUserId   Int?      // Usuario que registró este pago (audit)
  recordedByUser     User?     @relation("PaymentsRecordedByUser", fields: [recordedByUserId], references: [id])

  @@map("payments")
  @@index([creditId])
  @@index([installmentId])
  @@index([paymentTypeId])
  @@index([collectorId])
}

model Refinancing {
  id               Int       @id @default(autoincrement()) // PK refinanciamiento
  originalCreditId Int                                         // FK al crédito original (antes de refinanciar)
  originalCredit   Credit    @relation("OriginalCredit", fields: [originalCreditId], references: [id])
  newCreditId      Int?                                        // FK opcional al nuevo crédito (si se crea uno nuevo)
  newCredit        Credit?   @relation("NewCredit", fields: [newCreditId], references: [id])

  // Campos que registran el estado antes y después (útiles para trazabilidad y reporting)
  oldPrincipal     Decimal   @db.Decimal(12,2) // Principal antes del refinanciamiento
  oldRemaining     Decimal   @db.Decimal(12,2) // Saldo restante antes
  newPrincipal     Decimal   @db.Decimal(12,2) // Nuevo principal luego del ajuste
  newRemaining     Decimal   @db.Decimal(12,2) // Nuevo saldo luego del ajuste
  oldInterestRate  Decimal   @db.Decimal(6,4)  // Tasa anterior
  newInterestRate  Decimal   @db.Decimal(6,4)  // Tasa nueva
  date             DateTime  @default(now())   // Fecha del evento de refinanciación
  notes            String?                          // Observaciones

  @@map("refinancings")
  @@index([originalCreditId])
  @@index([newCreditId])
  @@index([date])
}
