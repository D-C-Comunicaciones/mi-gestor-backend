generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// -------------------------------------
/// TABLAS AUXILIARES / CATÁLOGOS
/// -------------------------------------

model Zone {
  id       Int     @id @default(autoincrement()) // PK: identificador único de la zona
  name     String  @unique // Nombre de la zona (ej: Norte, Centro)
  code     String  @unique // Código corto de la zona (útil para integraciones)
  isActive Boolean @default(true) // Indica si la zona está activa (soft delete)

  collectors Collector[] // Rel: cobradores asignados a la zona
  customers  Customer[] // Rel: clientes asignados a la zona

  @@index([name])
  @@index([code])
  @@index([isActive])
  @@map("zones")
}

model TypeDocumentIdentification {
  id       Int     @id @default(autoincrement()) // PK: id del tipo de documento
  name     String  @unique // Nombre del tipo (CC, CE, NIT...)
  code     String  @unique // Código corto (ej: CC)
  isActive Boolean @default(true) // Activo/inactivo para administración

  customers  Customer[] // Rel: clientes que usan este tipo de documento
  collectors Collector[] // Rel: cobradores que usan este tipo de documento

  @@index([name])
  @@index([code])
  @@index([isActive])
  @@map("type_document_identifications")
}

model Gender {
  id       Int     @id @default(autoincrement()) // PK: id del género
  name     String  @unique // Nombre (Masculino, Femenino, Otro)
  code     String  @unique // Código corto
  isActive Boolean @default(true) // Activación/desactivación

  customers  Customer[] // Rel: clientes vinculados
  collectors Collector[] // Rel: cobradores vinculados

  @@index([name])
  @@index([code])
  @@index([isActive])
  @@map("genders")
}

model LoanType {
  id       Int     @id @default(autoincrement()) // PK: id del tipo de crédito
  name     String  @unique // Ej: CUOTA_FIJA, INTERES_MENSUAL (método)
  isActive Boolean @default(true) // Permite activar/desactivar tipos

  loans Loan[] // Créditos asociados a este tipo

  @@index([name])
  @@index([isActive])
  @@map("loan_types")
}

model PaymentFrequency {
  id       Int     @id @default(autoincrement()) // PK: id de frecuencia
  name     String  @unique // Ej: DAILY, WEEKLY, BIWEEKLY, MONTHLY
  isActive Boolean @default(true) // Activación para administrar frecuencias

  loans Loan[] // Créditos que usan esta frecuencia

  @@index([name])
  @@index([isActive])
  @@map("payment_frequencies")
}

model LoanStatus {
  id          Int     @id @default(autoincrement()) // PK: id del estado del crédito
  name        String  @unique // Ej: ACTIVO, CANCELADO, REFINANCIADO
  isActive    Boolean @default(true) // Permite mantener catálogo dinámico
  description String?

  loans Loan[] // Créditos en ese estado

  @@index([name])
  @@index([isActive])
  @@map("loan_statuses")
}

model PaymentType {
  id       Int     @id @default(autoincrement()) // PK: id tipo de pago
  name     String  @unique // Ej: CAPITAL, INTEREST, LATE_FEE, RENT
  isActive Boolean @default(true) // Control de catálogo

  payments Payment[] // Pagos registrados con ese tipo

  @@index([name])
  @@index([isActive])
  @@map("payment_types")
}

/// -------------------------------------
/// USUARIOS, ROLES Y PERMISOS
/// -------------------------------------

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  name        String
  roleId      Int?
  role        Role?        @relation(fields: [roleId], references: [id])
  loginAudits LoginAudit[]
  customer    Customer?
  collector   Collector?
  isActive    Boolean      @default(true)

  // Relación para pagos registrados por este usuario (audit)
  paymentsRecorded Payment[]  @relation("PaymentsRecordedByUser")
  discountsCreated Discount[] @relation("DiscountsCreatedByUser")
  notes      Note[]     // Notas creadas por este usuario

  @@index([email])
  @@index([roleId])
  @@index([isActive])
  @@map("users")
}

model Role {
  id              Int              @id @default(autoincrement()) // PK rol
  name            String           @unique // Nombre del rol (admin, collector,...)
  description     String? // Descripción del rol
  isActive        Boolean          @default(true) // Activación del rol
  rolePermissions RolePermission[] // Permisos asignados
  users           User[]

  @@index([name])
  @@index([isActive])
  @@map("roles")
}

model Permission {
  id              Int              @id @default(autoincrement()) // PK permiso
  name            String           @unique // Nombre (crear_cliente, ver_reportes...)
  description     String?
  isActive        Boolean          @default(true) // Activación del permiso
  rolePermissions RolePermission[] // Roles que contienen este permiso

  @@index([name])
  @@index([isActive])
  @@map("permissions")
}

model RolePermission {
  roleId       Int
  permissionId Int

  // FK y relaciones para tabla intermedia muchos-a-muchos
  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  isActive Boolean @default(true) // Permite desactivar asociaciones sin borrarlas

  @@id([roleId, permissionId]) // PK compuesta
  @@index([roleId])
  @@index([permissionId])
  @@index([isActive])
  @@map("role_permissions")
}

model LoginAudit {
  id        Int      @id @default(autoincrement()) // PK auditoría de login
  userId    Int // FK al usuario que inició sesión
  sessionId String   @default("unknown") // Identificador de sesión (si hay)
  ip        String // IP desde donde se conectó
  device    String // User-agent / dispositivo
  location  String? // Ubicación opcional (geo)
  timestamp DateTime @default(now()) // Marca de tiempo del acceso

  user User @relation(fields: [userId], references: [id]) // Relación a User

  @@index([userId])
  @@index([timestamp])
  @@index([sessionId])
  @@map("logins")
}

model Change {
  id        Int      @id @default(autoincrement()) // PK: registro de cambios (audit trail)
  model     String // Nombre del modelo afectado (ej: "loan")
  modelId   Int // ID del registro afectado (ej: crédito específico)
  action    String // Acción (CREATE, UPDATE, DELETE)
  before    Json? // Estado anterior (JSON) - útil para revert/registro
  after     Json? // Estado posterior (JSON)
  timestamp DateTime @default(now()) // Fecha del cambio
  userId    Int // Usuario que realizó el cambio

  @@index([model])
  @@index([modelId])
  @@index([action])
  @@index([userId])
  @@index([timestamp])
  @@map("changes")
}

/// -------------------------------------
/// CUSTOMERS Y COBRADORES
/// -------------------------------------

model Customer {
  id        Int    @id @default(autoincrement()) // PK cobrador
  firstName String // Nombre
  lastName  String // Apellido

  typeDocumentIdentificationId Int // FK a tipo de documento
  typeDocumentIdentification   TypeDocumentIdentification @relation(fields: [typeDocumentIdentificationId], references: [id])

  genderId Int
  gender   Gender @relation(fields: [genderId], references: [id])

  documentNumber Int      @unique // Número de documento (único)
  birthDate      DateTime @db.Date // Fecha de nacimiento (opcional, pero útil para auditoría)
  address        String
  phone          String // Teléfono
  zoneId         Int? // FK opcional a Zone (si trabaja por zona)
  userId         Int?     @unique // FK opcional a User (si tiene cuenta)
  isActive       Boolean  @default(true) // Activación del cobrador

  // Relaciones
  zone Zone? @relation(fields: [zoneId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  loans Loan[] // Créditos asociados a este customer

  advances Advance[] // Abonos del cliente

  @@index([firstName])
  @@index([lastName])
  @@index([zoneId])
  @@index([isActive])
  @@map("customers")
}

model Collector {
  id        Int    @id @default(autoincrement()) // PK cobrador
  firstName String // Nombre
  lastName  String // Apellido

  typeDocumentIdentificationId Int // FK a tipo de documento
  typeDocumentIdentification   TypeDocumentIdentification @relation(fields: [typeDocumentIdentificationId], references: [id])

  genderId Int
  gender   Gender @relation(fields: [genderId], references: [id])

  documentNumber Int      @unique // Número de documento (único)
  birthDate      DateTime @db.Date // Fecha de nacimiento (opcional, pero útil para auditoría)
  address        String
  phone          String // Teléfono
  zoneId         Int? // FK opcional a Zone (si trabaja por zona)
  userId         Int?     @unique // FK opcional a User (si tiene cuenta)
  isActive       Boolean  @default(true) // Activación del cobrador

  // Relaciones
  zone     Zone?     @relation(fields: [zoneId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])
  advances Advance[] @relation("AdvancesCollectedByCollector") // Abonos recolectados
  payments Payment[] @relation("PaymentsCollectedBy") // Pagos recolectados

  @@index([firstName])
  @@index([lastName])
  @@index([zoneId])
  @@index([isActive])
  @@map("collectors")
}

model InterestRate {
  id    Int     @id @default(autoincrement()) // PK
  name  String // Ejemplo: "1%"
  value Decimal @db.Decimal(20, 2) // Tasa de interés (ej. 0.0500 => 5% anual o según convención)
  loan  Loan[]

  @@index([value])
  @@map("interest_rates")
}

model Term {
  id    Int    @id @default(autoincrement()) // PK
  value Int // Número de cuotas/plazos (si aplica)
  loan  Loan[]

  @@index([value])
  @@map("terms")
}

model PenaltyRate {
  id       Int     @id @default(autoincrement())
  name     String // Ejemplo: "Interés moratorio legal máximo"
  value    Decimal @db.Decimal(20, 2) // Ejemplo: 0.05 = 5% mensual o anual según config
  isActive Boolean @default(true)

  loans Loan[] // 👈 Relación con créditos

  @@map("penalty_rates")
}

model MoratoryInterest {
  id            Int   @id @default(autoincrement())
  installmentId Int   
  daysLate      Int
  amount        Float
  paidAt       DateTime? @db.Date
  paidAmount  Decimal @default(0) @db.Decimal(20, 2)
  isPaid      Boolean @default(false)
  moratoryInterestStatusId Int @default(1)
  moratoryInterestStatus  MoratoryInterestStatus @relation(fields: [moratoryInterestStatusId], references: [id])
  installment Installment @relation(fields: [installmentId], references: [id])
  discounts   Discount[]  @relation("MoratoryDiscounts")

  @@index([installmentId, moratoryInterestStatusId, daysLate, amount, paidAt, paidAmount, isPaid])
  @@map("moratory_interests")
}

model MoratoryInterestStatus {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  moratories  MoratoryInterest[]

  @@index([id, name])
  @@map("moratory_interest_statuses")
}

model GracePeriod {
  id       Int     @id @default(autoincrement())
  name     String // Ej: "15 días", "1 mes", "3 meses"
  days     Int // Número de días del período de gracia
  isActive Boolean @default(true)

  loans Loan[] // Relación con los préstamos que usan este período

  @@index([days])
  @@map("grace_periods")
}

/// -------------------------------------
/// CRÉDITOS, CUOTAS, PAGOS Y REFINANCIACIONES
/// -------------------------------------

model Loan {
  id         Int      @id @default(autoincrement()) // PK crédito
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])

  loanAmount       Decimal @db.Decimal(20, 2) // Monto prestado original
  remainingBalance Decimal @db.Decimal(20, 2) // Saldo actual (disminuye con abonos a capital)
  interestRateId   Int // FK → tabla InterestRate (interés del préstamo)
  penaltyRateId    Int? // FK → tabla PenaltyRate (tasa de interés moratorio)

  termId                 Int? // FK → tabla Term (Número de cuotas del préstamo)
  paymentFrequencyId     Int // Frecuencia de pago (diario, semanal, mensual)
  loanTypeId             Int // Tipo de crédito (1 = Cuota fija, 2 = Solo intereses)
  loanStatusId           Int // Estado del crédito
  gracePeriodId          Int? // FK → tabla GracePeriod (plazo de gracia)
  graceEndDate           DateTime? @db.Date // fecha de finalización de periodo de gracia.
  requiresCapitalPayment Boolean   @default(false) // ⬅️ después del período de gracia se activa(Aplica solo para préstamos mensuales de linea de crédito 2).

  // Relaciones
  interestRate     InterestRate     @relation(fields: [interestRateId], references: [id])
  penaltyRate      PenaltyRate?     @relation(fields: [penaltyRateId], references: [id])
  loanType         LoanType         @relation(fields: [loanTypeId], references: [id])
  loanStatus       LoanStatus       @relation(fields: [loanStatusId], references: [id])
  paymentFrequency PaymentFrequency @relation(fields: [paymentFrequencyId], references: [id])
  term             Term?            @relation(fields: [termId], references: [id])
  gracePeriod      GracePeriod?     @relation(fields: [gracePeriodId], references: [id])

  // Fechas clave
  startDate   DateTime  @db.Date // Fecha de inicio
  nextDueDate DateTime? @db.Date // Próxima fecha esperada de pago

  // Flags
  isActive Boolean @default(true)

  // Relaciones hijas
  installments         Installment[] // Cronograma de cuotas generadas
  payments             Payment[] // Pagos realizados
  refinancingsOriginal Refinancing[] @relation("OriginalLoan")
  refinancingsNew      Refinancing[] @relation("NewLoan")

  positiveBalances PositiveBalance[] @relation("PositiveBalances")
  advances         Advance[] // Abonos al préstamo
  discounts        Discount[]        @relation("LoanDiscounts") // Descuentos al préstamo

  @@index([customerId])
  @@index([paymentFrequencyId])
  @@index([loanTypeId])
  @@index([interestRateId])
  @@index([penaltyRateId])
  @@index([loanStatusId])
  @@index([startDate])
  @@index([isActive])
  @@map("loans")
}

model Note {
  id        Int      @id @default(autoincrement()) // PK nota
  modelId   Int      // ID del registro al que se asocia la nota
  model     String   // Nombre del modelo al que se asocia la nota (ej: "loan", "customer")
  content   String   // Contenido de la nota
  createdBy Int      @default(0) // FK al usuario que creó la nota
  user      User     @relation(fields: [createdBy], references: [id]) // Relación a User
  createdAt DateTime @default(now()) // Fecha de creación
  @@index([createdBy, model, modelId, createdAt])
  @@map("notes")
}

/// -------------------------------------
/// TABLA DE CUOTAS (INSTALLMENTS)
/// -------------------------------------
model Installment {
  id             Int       @id @default(autoincrement())
  loanId         Int
  loan           Loan      @relation(fields: [loanId], references: [id])
  sequence       Int
  dueDate        DateTime  @db.Date
  capitalAmount  Decimal   @db.Decimal(20, 2)
  interestAmount Decimal   @db.Decimal(20, 2)
  totalAmount    Decimal   @db.Decimal(20, 2)
  paidAmount     Decimal   @default(0) @db.Decimal(20, 2)
  isPaid         Boolean   @default(false)
  isActive       Boolean   @default(true)
  paidAt         DateTime?

  statusId Int               @default(1) // FK a la tabla de estados de cuota
  status   InstallmentStatus @relation(fields: [statusId], references: [id])

  paymentAllocations         PaymentAllocation[]
  discounts                  Discount[]                  @relation("InstallmentDiscounts")
  moratoryInterests          MoratoryInterest[]
  positiveBalanceAllocations PositiveBalanceAllocation[]

  @@index([loanId])
  @@index([dueDate])
  @@index([isPaid])
  @@map("installments")
}

model InstallmentStatus {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  Installments Installment[]

  @@index([name, description])
  @@map("installment_statuses")
}

model PaymentMethod {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  isActive  Boolean @default(true)
  payments  Payment[]

  @@index([name])
  @@index([isActive])
  @@map("payment_methods")
}

model Payment {
  id     Int  @id @default(autoincrement())
  loanId Int
  loan   Loan @relation(fields: [loanId], references: [id])

  amount              Decimal   @db.Decimal(20, 2)
  appliedToCapital    Decimal   @default(0) @db.Decimal(20, 2)
  appliedToInterest   Decimal   @default(0) @db.Decimal(20, 2)
  appliedToLateFee    Decimal   @default(0) @db.Decimal(20, 2)
  
  paymentTypeId Int
  paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])

  paymentMethodId Int
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  paymentDate         DateTime @db.Date @default(now())
  recordedByUserId    Int
  recordedByUser      User     @relation("PaymentsRecordedByUser", fields: [recordedByUserId], references: [id])

  // Agregar relación con collector
  collectorId         Int?
  collector           Collector? @relation("PaymentsCollectedBy", fields: [collectorId], references: [id])

  allocations PaymentAllocation[]

  @@index([loanId])
  @@index([paymentTypeId])
  @@index([recordedByUserId])
  @@index([collectorId])
  @@index([paymentDate])
  @@map("payments")
}

model PaymentAllocation {
  id        Int     @id @default(autoincrement())
  paymentId Int
  payment   Payment @relation(fields: [paymentId], references: [id])

  installmentId Int
  installment   Installment @relation(fields: [installmentId], references: [id])

  appliedToCapital  Decimal @default(0) @db.Decimal(20, 2)
  appliedToInterest Decimal @default(0) @db.Decimal(20, 2)
  appliedToLateFee  Decimal @default(0) @db.Decimal(20, 2)

  createdAt DateTime @default(now())

  @@index([paymentId])
  @@index([installmentId])
  @@map("payment_allocations")
}

model Refinancing {
  id             Int   @id @default(autoincrement()) // PK refinanciamiento
  originalLoanId Int // FK al crédito original (antes de refinanciar)
  originalLoan   Loan  @relation("OriginalLoan", fields: [originalLoanId], references: [id])
  newLoanId      Int? // FK opcional al nuevo crédito (si se crea uno nuevo)
  newLoan        Loan? @relation("NewLoan", fields: [newLoanId], references: [id])

  // Campos que registran el estado antes y después (útiles para trazabilidad y reporting)
  oldPrincipal    Decimal  @db.Decimal(20, 2) // Principal antes del refinanciamiento
  oldRemaining    Decimal  @db.Decimal(20, 2) // Saldo restante antes
  newPrincipal    Decimal  @db.Decimal(20, 2) // Nuevo principal luego del ajuste
  newRemaining    Decimal  @db.Decimal(20, 2) // Nuevo saldo luego del ajuste
  oldInterestRate Decimal  @db.Decimal(20, 2) // Tasa anterior
  newInterestRate Decimal  @db.Decimal(20, 2) // Tasa nueva
  date            DateTime @default(now()) // Fecha del evento de refinanciación
  notes           String? // Observaciones

  @@index([originalLoanId])
  @@index([newLoanId])
  @@index([date])
  @@map("refinancings")
}

model PositiveBalance {
  id     Int  @id @default(autoincrement()) // PK saldo a favor
  loanId Int // FK al préstamo
  loan   Loan @relation("PositiveBalances", fields: [loanId], references: [id])

  amount     Decimal @db.Decimal(20, 2) // Monto del saldo a favor
  source     String // Origen: "overpayment", "prepayment", etc.
  isUsed     Boolean @default(false) // Si ya se utilizó este saldo
  usedAmount Decimal @default(0) @db.Decimal(20, 2) // Monto ya utilizado

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  positiveBalanceAllocations PositiveBalanceAllocation[]

  @@index([loanId])
  @@index([isUsed])
  @@map("positive_balances")
}

model PositiveBalanceAllocation {
  id                Int             @id @default(autoincrement())
  positiveBalanceId Int
  positiveBalance   PositiveBalance @relation(fields: [positiveBalanceId], references: [id])

  installmentId Int
  installment   Installment @relation(fields: [installmentId], references: [id])

  appliedToInterest Decimal @db.Decimal(20, 2) // Cuánto del saldo se aplicó a intereses
  appliedToCapital  Decimal @db.Decimal(20, 2) // Cuánto del saldo se aplicó a capital

  createdAt DateTime @default(now())

  @@index([positiveBalanceId])
  @@index([installmentId])
  @@map("positive_balance_allocations")
}

model Advance {
  id         Int      @id @default(autoincrement()) // PK abono
  customerId Int // FK al cliente
  customer   Customer @relation(fields: [customerId], references: [id])
  loanId     Int // FK al préstamo
  loan       Loan     @relation(fields: [loanId], references: [id])

  amount          Decimal @db.Decimal(20, 2) // Monto del abono
  appliedAmount   Decimal @default(0) @db.Decimal(20, 2) // Monto ya aplicado del abono
  remainingAmount Decimal @db.Decimal(20, 2) // Monto pendiente por aplicar

  collectorId Int? // Cobrador que registró el abono
  collector   Collector? @relation("AdvancesCollectedByCollector", fields: [collectorId], references: [id])

  notes    String? // Notas del abono
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
  @@index([loanId])
  @@index([collectorId])
  @@index([isActive])
  @@map("advances")
}

model Discount {
  id             Int  @id @default(autoincrement())
  discountTypeId Int
  loanId         Int?
  installmentId  Int?
  moratoryId     Int?

  loan        Loan?             @relation("LoanDiscounts", fields: [loanId], references: [id])
  installment Installment?      @relation("InstallmentDiscounts", fields: [installmentId], references: [id])
  moratory    MoratoryInterest? @relation("MoratoryDiscounts", fields: [moratoryId], references: [id])

  description  String?
  amount       Decimal? @db.Decimal(20, 2)
  percentageId Int?

  createdAt       DateTime            @default(now())
  createdBy       Int?
  createdByUser   User?               @relation("DiscountsCreatedByUser", fields: [createdBy], references: [id])
  discountType    DiscountType        @relation(fields: [discountTypeId], references: [id])
  percentageValue PercentageDiscount? @relation(fields: [percentageId], references: [id])
  isActive        Boolean             @default(true)

  @@index([loanId])
  @@index([installmentId])
  @@index([moratoryId])
  @@map("discounts")
}

model DiscountType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  discounts   Discount[]

  @@map("discount_types")
}

model PercentageDiscount {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  value     Float      @unique
  discounts Discount[]

  @@index([id, value, name])
  @@map("percentage_discounts")
}

model ImportHistory {
  id                    Int                 @id @default(autoincrement())
  modelName             String // Tipo de entidad importada: 'customers', 'collectors', 'loans', etc.
  fileName              String
  fileSize              Int
  totalRecords          Int                 @default(0)
  successfulRecords     Int                 @default(0)
  errorRecords          Int                 @default(0)
  importHistoryStatusId Int
  startedAt             DateTime            @default(now())
  completedAt           DateTime?
  errorMessage          String?
  errorDetails          String? // JSON string con detalles de errores
  importHistoryStatus   ImportHistoryStatus @relation(fields: [importHistoryStatusId], references: [id])

  @@index([modelName, startedAt, completedAt, errorRecords, successfulRecords, errorDetails, importHistoryStatusId])
  @@map("import_historials")
}

model ImportHistoryStatus {
  id              Int             @id @default(autoincrement())
  name            String // 'Pending', 'In Progress', 'Completed', 'Failed'
  description     String?
  importHistories ImportHistory[]

  @@index([name])
  @@index([description])
  @@map("import_history_statuses")
}

model Company {
  id                Int      @id @default(autoincrement())
  name              String   @unique
  nit               BigInt   @unique
  verificationDigit Int?
  phone             String?  @unique
  email             String?  @unique
  address           String?
  logoUrl           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([name, nit, phone, email, createdAt, updatedAt])
  @@map("companies")
}

model Currency {
  id             Int             @id @default(autoincrement())
  code           String          @unique // Código ISO (ej: COP, USD)
  name           String // Nombre completo (ej: Peso colombiano)
  symbol         String // Símbolo (ej: $, US$)
  isActive       Boolean         @default(true) // Activo/inactivo para administración
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  configurations Configuration[]

  @@index([code, name, isActive])
  @@map("currencies")
}

model timezone {
  id             Int             @id @default(autoincrement())
  name           String          @unique // Nombre de la zona horaria (ej: America/Bogota)
  offset         String // Desplazamiento UTC (ej: -05:00)
  isActive       Boolean         @default(true) // Activo/inactivo para administración
  configurations Configuration[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([name, offset, isActive])
  @@map("timezones")
}

model Configuration {
  id           Int       @id @default(autoincrement())
  currencyId   Int? // FK a Currency
  currency     Currency? @relation(fields: [currencyId], references: [id])
  timezone     timezone? @relation(fields: [timezoneId], references: [id])
  timezoneId   Int? // FK a timezone
  colorPalette String? // Paleta de colores (ej: "#123456,#abcdef,...")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([currencyId, timezoneId, createdAt, updatedAt])
  @@map("configurations")
}
