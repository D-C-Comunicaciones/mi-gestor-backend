datasource db {
  provider = "postgresql" // cambia a mysql/sqlserver/sqlite/mongodb si aplica
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  name     String

  roleId Int?
  role   Role? @relation(fields: [roleId], references: [id])

  loginAudits LoginAudit[]

  isActive Boolean @default(true)

  @@map("users")
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  isActive    Boolean @default(true)

  rolePermissions RolePermission[]
  users           User[]

  @@map("roles")
}

model Permission {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  isActive    Boolean @default(true)

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  isActive Boolean @default(true)

  @@id([roleId, permissionId]) // Clave primaria compuesta
  @@map("role_permissions")
}

model LoginAudit {
  id        Int      @id @default(autoincrement())
  userId    Int
  sessionId String   @default("unknown")
  ip        String
  device    String // user-agent
  location  String?
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("logins")
}

model Change {
  id        Int      @id @default(autoincrement())
  model     String
  action    String
  before    Json?
  after     Json?
  timestamp DateTime @default(now())
  userId    Int

  @@map("changes")
}

