import { Injectable, NotFoundException, BadRequestException, Logger } from '@nestjs/common';
import { PrismaService } from '@infraestructure/prisma/prisma.service';
import { CreateInterestRateDto, UpdateInterestRateDto } from './dto';

/**
 * Servicio para la gesti√≥n de tasas de inter√©s corriente
 * 
 * Este servicio maneja todas las operaciones relacionadas con las tasas de inter√©s:
 * - Consulta de tasas activas para la creaci√≥n de pr√©stamos
 * - Consulta de tasas para procesos de refinanciaci√≥n
 * - Creaci√≥n de nuevas tasas de inter√©s (futuro)
 * - Actualizaci√≥n de tasas existentes (futuro)
 * - Gesti√≥n del estado activo/inactivo
 * 
 * Las tasas de inter√©s definen el costo financiero de los pr√©stamos:
 * - Tasa mensual: Aplicada mensualmente al saldo capital
 * - Tasa anual: Convertida a mensual para c√°lculos
 * - Tasa preferencial: Para clientes con buen historial
 * - Tasa est√°ndar: Para nuevos clientes o pr√©stamos de mayor riesgo
 * 
 * @version 1.0.0
 * @since 2025-01-04
 */
@Injectable()
export class InterestRatesService {
  private readonly logger = new Logger(InterestRatesService.name);

  constructor(
    private readonly prisma: PrismaService,
  ) { }

  /**
   * Obtiene todas las tasas de inter√©s activas
   * 
   * Este m√©todo es utilizado principalmente para:
   * - Poblar selectores en formularios de creaci√≥n de pr√©stamos
   * - Validar que la tasa de inter√©s seleccionada est√© disponible
   * - Mostrar opciones de tasas disponibles a los usuarios finales
   * - Procesos de refinanciaci√≥n de pr√©stamos existentes
   * 
   * @returns Promise<InterestRate[]> Lista de tasas de inter√©s activas ordenadas por valor
   * @throws {NotFoundException} Cuando no se encuentran tasas de inter√©s activas
   * @throws {BadRequestException} En caso de error en la consulta
   * 
   * @example
   * ```typescript
   * const rates = await interestRatesService.findAll();
   * // Retorna: [{ id: 1, name: '2.5% Mensual', value: 0.025, isActive: true }, ...]
   * ```
   */
  async findAll() {
    this.logger.log('üîç Consultando tasas de inter√©s activas');
    
    try {
      const rawInterestRates = await this.prisma.interestRate.findMany({ 
        where: { 
          // Nota: Agregamos un campo isActive al esquema si no existe
          // Por ahora consultamos todas las tasas
        },
        orderBy: { value: 'asc' } // Ordenar por valor de menor a mayor
      });
      
      if (!rawInterestRates || rawInterestRates.length === 0) {
        this.logger.warn('‚ö†Ô∏è No se encontraron tasas de inter√©s disponibles');
        throw new NotFoundException('No se encontraron tasas de inter√©s disponibles');
      }

      // Transformar Decimal a number para la respuesta
      const formattedRates = rawInterestRates.map(rate => ({
        ...rate,
        value: Number(rate.value),
        percentage: `${(Number(rate.value) * 100).toFixed(2)}%`
      }));

      this.logger.log(`‚úÖ Se encontraron ${formattedRates.length} tasas de inter√©s disponibles`);
      return formattedRates;
    } catch (error) {
      this.logger.error('‚ùå Error consultando tasas de inter√©s:', error);
      
      if (error instanceof NotFoundException) {
        throw error;
      }
      
      throw new BadRequestException('Error al consultar las tasas de inter√©s');
    }
  }

  /**
   * Obtiene tasas de inter√©s con paginaci√≥n
   * 
   * @param page N√∫mero de p√°gina (default: 1)
   * @param limit L√≠mite de elementos por p√°gina (default: 10)
   * @returns Promise con tasas paginadas y metadatos
   * 
   * @future Implementar cuando sea necesario paginar las tasas
   */
  // async findAllPaginated(page: number = 1, limit: number = 10) {
  //   this.logger.log(`üîç Consultando tasas de inter√©s - P√°gina ${page}, L√≠mite ${limit}`);
  //   
  //   try {
  //     const skip = (page - 1) * limit;
  //     
  //     const [rates, total] = await Promise.all([
  //       this.prisma.interestRate.findMany({
  //         skip,
  //         take: limit,
  //         orderBy: { value: 'asc' }
  //       }),
  //       this.prisma.interestRate.count()
  //     ]);
  //     
  //     const formattedRates = rates.map(rate => ({
  //       ...rate,
  //       value: Number(rate.value),
  //       percentage: `${(Number(rate.value) * 100).toFixed(2)}%`
  //     }));
  //     
  //     const lastPage = Math.ceil(total / limit);
  //     
  //     return {
  //       interestRates: formattedRates,
  //       meta: {
  //         total,
  //         page,
  //         lastPage,
  //         limit,
  //         hasNextPage: page < lastPage
  //       }
  //     };
  //   } catch (error) {
  //     this.logger.error('‚ùå Error en consulta paginada:', error);
  //     throw new BadRequestException('Error al consultar las tasas de inter√©s');
  //   }
  // }

  /**
   * Crea una nueva tasa de inter√©s
   * 
   * @param createInterestRateDto Datos de la tasa de inter√©s a crear
   * @returns Promise<InterestRate> La tasa de inter√©s creada
   * @throws {BadRequestException} Si ya existe una tasa con el mismo nombre o valor
   * 
   * @future Implementar cuando sea necesario crear tasas din√°micamente
   */
  // async create(createInterestRateDto: CreateInterestRateDto) {
  //   this.logger.log(`üìù Creando nueva tasa de inter√©s: ${createInterestRateDto.name}`);
  //   
  //   try {
  //     // Verificar que no exista una tasa con el mismo nombre
  //     const existingByName = await this.prisma.interestRate.findFirst({
  //       where: { name: createInterestRateDto.name }
  //     });
  //     
  //     if (existingByName) {
  //       throw new BadRequestException(`Ya existe una tasa con el nombre: ${createInterestRateDto.name}`);
  //     }
  //     
  //     // Verificar que no exista una tasa con el mismo valor
  //     const existingByValue = await this.prisma.interestRate.findFirst({
  //       where: { value: createInterestRateDto.value }
  //     });
  //     
  //     if (existingByValue) {
  //       throw new BadRequestException(`Ya existe una tasa con el valor: ${createInterestRateDto.value}`);
  //     }
  //     
  //     const interestRate = await this.prisma.interestRate.create({
  //       data: {
  //         ...createInterestRateDto,
  //         value: new Decimal(createInterestRateDto.value)
  //       }
  //     });
  //     
  //     this.logger.log(`‚úÖ Tasa de inter√©s creada exitosamente: ${interestRate.id}`);
  //     return {
  //       ...interestRate,
  //       value: Number(interestRate.value),
  //       percentage: `${(Number(interestRate.value) * 100).toFixed(2)}%`
  //     };
  //   } catch (error) {
  //     this.logger.error('‚ùå Error creando tasa de inter√©s:', error);
  //     throw error;
  //   }
  // }

  /**
   * Obtiene una tasa de inter√©s por su ID
   * 
   * @param id ID de la tasa de inter√©s
   * @returns Promise<InterestRate> La tasa de inter√©s encontrada
   * @throws {NotFoundException} Si no se encuentra la tasa de inter√©s
   * 
   * @future Implementar cuando sea necesario consultar tasas individuales
   */
  // async findOne(id: number) {
  //   this.logger.log(`üîç Consultando tasa de inter√©s con ID: ${id}`);
  //   
  //   try {
  //     const interestRate = await this.prisma.interestRate.findUnique({
  //       where: { id }
  //     });
  //     
  //     if (!interestRate) {
  //       throw new NotFoundException(`Tasa de inter√©s con ID ${id} no encontrada`);
  //     }
  //     
  //     const formattedRate = {
  //       ...interestRate,
  //       value: Number(interestRate.value),
  //       percentage: `${(Number(interestRate.value) * 100).toFixed(2)}%`
  //     };
  //     
  //     this.logger.log(`‚úÖ Tasa de inter√©s encontrada: ${formattedRate.name}`);
  //     return formattedRate;
  //   } catch (error) {
  //     this.logger.error(`‚ùå Error consultando tasa de inter√©s ${id}:`, error);
  //     throw error;
  //   }
  // }

  /**
   * Actualiza una tasa de inter√©s existente
   * 
   * @param id ID de la tasa de inter√©s a actualizar
   * @param updateInterestRateDto Datos a actualizar
   * @returns Promise<InterestRate> La tasa de inter√©s actualizada
   * @throws {NotFoundException} Si no se encuentra la tasa de inter√©s
   * 
   * @future Implementar cuando sea necesario modificar tasas existentes
   */
  // async update(id: number, updateInterestRateDto: UpdateInterestRateDto) {
  //   this.logger.log(`üìù Actualizando tasa de inter√©s ${id}`);
  //   
  //   try {
  //     const existingRate = await this.findOne(id);
  //     
  //     // Verificar unicidad si se est√° cambiando el nombre
  //     if (updateInterestRateDto.name && updateInterestRateDto.name !== existingRate.name) {
  //       const duplicateName = await this.prisma.interestRate.findFirst({
  //         where: { 
  //           name: updateInterestRateDto.name,
  //           id: { not: id }
  //         }
  //       });
  //       
  //       if (duplicateName) {
  //         throw new BadRequestException(`Ya existe una tasa con el nombre: ${updateInterestRateDto.name}`);
  //       }
  //     }
  //     
  //     // Verificar unicidad si se est√° cambiando el valor
  //     if (updateInterestRateDto.value && updateInterestRateDto.value !== existingRate.value) {
  //       const duplicateValue = await this.prisma.interestRate.findFirst({
  //         where: { 
  //           value: updateInterestRateDto.value,
  //           id: { not: id }
  //         }
  //       });
  //       
  //       if (duplicateValue) {
  //         throw new BadRequestException(`Ya existe una tasa con el valor: ${updateInterestRateDto.value}`);
  //       }
  //     }
  //     
  //     const updateData = { ...updateInterestRateDto };
  //     if (updateData.value) {
  //       updateData.value = new Decimal(updateData.value);
  //     }
  //     
  //     const updatedRate = await this.prisma.interestRate.update({
  //       where: { id },
  //       data: updateData
  //     });
  //     
  //     this.logger.log(`‚úÖ Tasa de inter√©s actualizada exitosamente`);
  //     return {
  //       ...updatedRate,
  //       value: Number(updatedRate.value),
  //       percentage: `${(Number(updatedRate.value) * 100).toFixed(2)}%`
  //     };
  //   } catch (error) {
  //     this.logger.error(`‚ùå Error actualizando tasa de inter√©s ${id}:`, error);
  //     throw error;
  //   }
  // }

  /**
   * Desactiva una tasa de inter√©s (soft delete)
   * 
   * @param id ID de la tasa de inter√©s a desactivar
   * @returns Promise<InterestRate> La tasa de inter√©s desactivada
   * @throws {NotFoundException} Si no se encuentra la tasa de inter√©s
   * @throws {BadRequestException} Si la tasa tiene pr√©stamos activos asociados
   * 
   * @future Implementar cuando sea necesario desactivar tasas
   */
  // async remove(id: number) {
  //   this.logger.log(`üóëÔ∏è Desactivando tasa de inter√©s ${id}`);
  //   
  //   try {
  //     const existingRate = await this.findOne(id);
  //     
  //     // Verificar si tiene pr√©stamos activos asociados
  //     const activeLoans = await this.prisma.loan.count({
  //       where: { 
  //         interestRateId: id,
  //         isActive: true
  //       }
  //     });
  //     
  //     if (activeLoans > 0) {
  //       throw new BadRequestException(
  //         `No se puede desactivar la tasa de inter√©s. Tiene ${activeLoans} pr√©stamo(s) activo(s) asociado(s)`
  //       );
  //     }
  //     
  //     const deactivatedRate = await this.prisma.interestRate.update({
  //       where: { id },
  //       data: { isActive: false }
  //     });
  //     
  //     this.logger.log(`‚úÖ Tasa de inter√©s desactivada exitosamente`);
  //     return {
  //       ...deactivatedRate,
  //       value: Number(deactivatedRate.value),
  //       percentage: `${(Number(deactivatedRate.value) * 100).toFixed(2)}%`
  //     };
  //   } catch (error) {
  //     this.logger.error(`‚ùå Error desactivando tasa de inter√©s ${id}:`, error);
  //     throw error;
  //   }
  // }

  /**
   * Calcula el inter√©s mensual basado en una tasa y un monto
   * 
   * @param rateId ID de la tasa de inter√©s
   * @param amount Monto sobre el cual calcular el inter√©s
   * @returns Promise<number> Valor del inter√©s calculado
   * 
   * @example
   * ```typescript
   * const interest = await service.calculateMonthlyInterest(1, 1000000);
   * // Si la tasa es 2.5% mensual, retorna 25000
   * ```
   * 
   * @future Implementar para c√°lculos de simulaciones de pr√©stamos
   */
  // async calculateMonthlyInterest(rateId: number, amount: number): Promise<number> {
  //   this.logger.log(`üí∞ Calculando inter√©s mensual - Tasa: ${rateId}, Monto: ${amount}`);
  //   
  //   try {
  //     const rate = await this.findOne(rateId);
  //     const monthlyInterest = amount * rate.value;
  //     
  //     this.logger.log(`üìä Inter√©s calculado: ${monthlyInterest}`);
  //     return Math.round(monthlyInterest * 100) / 100; // Redondear a 2 decimales
  //   } catch (error) {
  //     this.logger.error('‚ùå Error calculando inter√©s:', error);
  //     throw error;
  //   }
  // }
}
