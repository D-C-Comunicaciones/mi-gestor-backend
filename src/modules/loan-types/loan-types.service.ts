import { Injectable, NotFoundException, BadRequestException, Logger } from '@nestjs/common';
import { PrismaService } from '@infraestructure/prisma/prisma.service';
import { CreateLoantypeDto, UpdateLoantypeDto } from './dto';

/**
 * Servicio para la gesti√≥n de tipos de cr√©dito
 * 
 * Este servicio maneja todas las operaciones relacionadas con los tipos de cr√©dito:
 * - Consulta de tipos activos para la creaci√≥n de pr√©stamos
 * - Creaci√≥n de nuevos tipos de cr√©dito (futuro)
 * - Actualizaci√≥n de tipos existentes (futuro)
 * - Gesti√≥n del estado activo/inactivo
 * 
 * Los tipos de cr√©dito definen las caracter√≠sticas de los pr√©stamos como:
 * - CUOTA_FIJA: Pr√©stamos con cuotas fijas
 * - INTERES_MENSUAL: Pr√©stamos donde solo se pagan intereses
 * - LINEA_CREDITO: L√≠neas de cr√©dito rotativas
 */
@Injectable()
export class LoanTypesService {
  private readonly logger = new Logger(LoanTypesService.name);

  constructor(
    private readonly prisma: PrismaService,
  ) { }

  /**
   * Obtiene todos los tipos de cr√©dito activos
   * 
   * Este m√©todo es utilizado principalmente para:
   * - Poblar selectores en formularios de creaci√≥n de pr√©stamos
   * - Validar que el tipo de cr√©dito seleccionado est√© disponible
   * - Mostrar opciones disponibles a los usuarios
   * 
   * @returns Promise<LoanType[]> Lista de tipos de cr√©dito activos
   * @throws {NotFoundException} Cuando no se encuentran tipos de cr√©dito activos
   * 
   * @example
   * ```typescript
   * const loanTypes = await loanTypesService.findAll();
   * // Retorna: [{ id: 1, name: 'CUOTA_FIJA', isActive: true }, ...]
   * ```
   */
  async findAll() {
    this.logger.log('üîç Consultando tipos de cr√©dito activos');
    
    try {
      const rawLoanTypes = await this.prisma.loanType.findMany({ 
        where: { isActive: true },
        orderBy: { name: 'asc' }
      });
      
      if (!rawLoanTypes || rawLoanTypes.length === 0) {
        this.logger.warn('‚ö†Ô∏è No se encontraron tipos de cr√©dito activos');
        throw new NotFoundException('No se encontraron tipos de cr√©dito disponibles');
      }

      this.logger.log(`‚úÖ Se encontraron ${rawLoanTypes.length} tipos de cr√©dito activos`);
      return rawLoanTypes;
    } catch (error) {
      this.logger.error('‚ùå Error consultando tipos de cr√©dito:', error);
      
      if (error instanceof NotFoundException) {
        throw error;
      }
      
      throw new BadRequestException('Error al consultar los tipos de cr√©dito');
    }
  }

  /**
   * Crea un nuevo tipo de cr√©dito
   * 
   * @param createLoanTypeDto Datos del tipo de cr√©dito a crear
   * @returns Promise<LoanType> El tipo de cr√©dito creado
   * @throws {BadRequestException} Si ya existe un tipo con el mismo nombre
   * 
   * @future Este m√©todo se implementar√° cuando sea necesario crear tipos din√°micamente
   */
  // async create(createLoanTypeDto: CreateLoantypeDto) {
  //   this.logger.log(`üìù Creando nuevo tipo de cr√©dito: ${createLoanTypeDto.name}`);
  //   
  //   try {
  //     // Verificar que no exista un tipo con el mismo nombre
  //     const existingType = await this.prisma.loanType.findUnique({
  //       where: { name: createLoanTypeDto.name }
  //     });
  //     
  //     if (existingType) {
  //       throw new BadRequestException(`Ya existe un tipo de cr√©dito con el nombre: ${createLoanTypeDto.name}`);
  //     }
  //     
  //     const loanType = await this.prisma.loanType.create({
  //       data: createLoanTypeDto
  //     });
  //     
  //     this.logger.log(`‚úÖ Tipo de cr√©dito creado exitosamente: ${loanType.id}`);
  //     return loanType;
  //   } catch (error) {
  //     this.logger.error('‚ùå Error creando tipo de cr√©dito:', error);
  //     throw error;
  //   }
  // }

  /**
   * Obtiene un tipo de cr√©dito por su ID
   * 
   * @param id ID del tipo de cr√©dito
   * @returns Promise<LoanType> El tipo de cr√©dito encontrado
   * @throws {NotFoundException} Si no se encuentra el tipo de cr√©dito
   * 
   * @future Implementar cuando sea necesario consultar tipos individuales
   */
  // async findOne(id: number) {
  //   this.logger.log(`üîç Consultando tipo de cr√©dito con ID: ${id}`);
  //   
  //   try {
  //     const loanType = await this.prisma.loanType.findUnique({
  //       where: { id }
  //     });
  //     
  //     if (!loanType) {
  //       throw new NotFoundException(`Tipo de cr√©dito con ID ${id} no encontrado`);
  //     }
  //     
  //     this.logger.log(`‚úÖ Tipo de cr√©dito encontrado: ${loanType.name}`);
  //     return loanType;
  //   } catch (error) {
  //     this.logger.error(`‚ùå Error consultando tipo de cr√©dito ${id}:`, error);
  //     throw error;
  //   }
  // }

  /**
   * Actualiza un tipo de cr√©dito existente
   * 
   * @param id ID del tipo de cr√©dito a actualizar
   * @param updateLoanTypeDto Datos a actualizar
   * @returns Promise<LoanType> El tipo de cr√©dito actualizado
   * @throws {NotFoundException} Si no se encuentra el tipo de cr√©dito
   * 
   * @future Implementar cuando sea necesario modificar tipos existentes
   */
  // async update(id: number, updateLoanTypeDto: UpdateLoantypeDto) {
  //   this.logger.log(`üìù Actualizando tipo de cr√©dito ${id}`);
  //   
  //   try {
  //     const existingType = await this.findOne(id);
  //     
  //     const updatedLoanType = await this.prisma.loanType.update({
  //       where: { id },
  //       data: updateLoanTypeDto
  //     });
  //     
  //     this.logger.log(`‚úÖ Tipo de cr√©dito actualizado exitosamente`);
  //     return updatedLoanType;
  //   } catch (error) {
  //     this.logger.error(`‚ùå Error actualizando tipo de cr√©dito ${id}:`, error);
  //     throw error;
  //   }
  // }

  /**
   * Desactiva un tipo de cr√©dito (soft delete)
   * 
   * @param id ID del tipo de cr√©dito a desactivar
   * @returns Promise<LoanType> El tipo de cr√©dito desactivado
   * @throws {NotFoundException} Si no se encuentra el tipo de cr√©dito
   * 
   * @future Implementar cuando sea necesario desactivar tipos
   */
  // async remove(id: number) {
  //   this.logger.log(`üóëÔ∏è Desactivando tipo de cr√©dito ${id}`);
  //   
  //   try {
  //     const existingType = await this.findOne(id);
  //     
  //     const deactivatedLoanType = await this.prisma.loanType.update({
  //       where: { id },
  //       data: { isActive: false }
  //     });
  //     
  //     this.logger.log(`‚úÖ Tipo de cr√©dito desactivado exitosamente`);
  //     return deactivatedLoanType;
  //   } catch (error) {
  //     this.logger.error(`‚ùå Error desactivando tipo de cr√©dito ${id}:`, error);
  //     throw error;
  //   }
  // }
}
